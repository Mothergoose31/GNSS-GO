// Code generated by capnpc-go. DO NOT EDIT.

package gnss

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type BaseEphemeris capnp.Struct

// BaseEphemeris_TypeID is the unique identifier for the type BaseEphemeris.
const BaseEphemeris_TypeID = 0xfde08cc67d073fd0

func NewBaseEphemeris(s *capnp.Segment) (BaseEphemeris, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return BaseEphemeris(st), err
}

func NewRootBaseEphemeris(s *capnp.Segment) (BaseEphemeris, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return BaseEphemeris(st), err
}

func ReadRootBaseEphemeris(msg *capnp.Message) (BaseEphemeris, error) {
	root, err := msg.Root()
	return BaseEphemeris(root.Struct()), err
}

func (s BaseEphemeris) String() string {
	str, _ := text.Marshal(0xfde08cc67d073fd0, capnp.Struct(s))
	return str
}

func (s BaseEphemeris) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BaseEphemeris) DecodeFromPtr(p capnp.Ptr) BaseEphemeris {
	return BaseEphemeris(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BaseEphemeris) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BaseEphemeris) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BaseEphemeris) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BaseEphemeris) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BaseEphemeris) PseudoRandomNumber() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BaseEphemeris) HasPseudoRandomNumber() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BaseEphemeris) PseudoRandomNumberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BaseEphemeris) SetPseudoRandomNumber(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s BaseEphemeris) Epoch() (GPSTime, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return GPSTime(p.Struct()), err
}

func (s BaseEphemeris) HasEpoch() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BaseEphemeris) SetEpoch(v GPSTime) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEpoch sets the epoch field to a newly
// allocated GPSTime struct, preferring placement in s's segment.
func (s BaseEphemeris) NewEpoch() (GPSTime, error) {
	ss, err := NewGPSTime(capnp.Struct(s).Segment())
	if err != nil {
		return GPSTime{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BaseEphemeris) EphemerisType() EphemerisType {
	return EphemerisType(capnp.Struct(s).Uint16(0))
}

func (s BaseEphemeris) SetEphemerisType(v EphemerisType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s BaseEphemeris) IsHealthy() bool {
	return capnp.Struct(s).Bit(16)
}

func (s BaseEphemeris) SetIsHealthy(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s BaseEphemeris) MaximumTimeDifference() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s BaseEphemeris) SetMaximumTimeDifference(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s BaseEphemeris) FileEpoch() (GPSTime, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return GPSTime(p.Struct()), err
}

func (s BaseEphemeris) HasFileEpoch() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s BaseEphemeris) SetFileEpoch(v GPSTime) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewFileEpoch sets the fileEpoch field to a newly
// allocated GPSTime struct, preferring placement in s's segment.
func (s BaseEphemeris) NewFileEpoch() (GPSTime, error) {
	ss, err := NewGPSTime(capnp.Struct(s).Segment())
	if err != nil {
		return GPSTime{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BaseEphemeris) FileName() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s BaseEphemeris) HasFileName() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s BaseEphemeris) FileNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s BaseEphemeris) SetFileName(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s BaseEphemeris) FileSource() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s BaseEphemeris) HasFileSource() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s BaseEphemeris) FileSourceBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s BaseEphemeris) SetFileSource(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// BaseEphemeris_List is a list of BaseEphemeris.
type BaseEphemeris_List = capnp.StructList[BaseEphemeris]

// NewBaseEphemeris creates a new list of BaseEphemeris.
func NewBaseEphemeris_List(s *capnp.Segment, sz int32) (BaseEphemeris_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return capnp.StructList[BaseEphemeris](l), err
}

// BaseEphemeris_Future is a wrapper for a BaseEphemeris promised by a client call.
type BaseEphemeris_Future struct{ *capnp.Future }

func (f BaseEphemeris_Future) Struct() (BaseEphemeris, error) {
	p, err := f.Future.Ptr()
	return BaseEphemeris(p.Struct()), err
}
func (p BaseEphemeris_Future) Epoch() GPSTime_Future {
	return GPSTime_Future{Future: p.Future.Field(1, nil)}
}
func (p BaseEphemeris_Future) FileEpoch() GPSTime_Future {
	return GPSTime_Future{Future: p.Future.Field(2, nil)}
}

type GPSEphemeris capnp.Struct

// GPSEphemeris_TypeID is the unique identifier for the type GPSEphemeris.
const GPSEphemeris_TypeID = 0xd67148628f889f75

func NewGPSEphemeris(s *capnp.Segment) (GPSEphemeris, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return GPSEphemeris(st), err
}

func NewRootGPSEphemeris(s *capnp.Segment) (GPSEphemeris, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return GPSEphemeris(st), err
}

func ReadRootGPSEphemeris(msg *capnp.Message) (GPSEphemeris, error) {
	root, err := msg.Root()
	return GPSEphemeris(root.Struct()), err
}

func (s GPSEphemeris) String() string {
	str, _ := text.Marshal(0xd67148628f889f75, capnp.Struct(s))
	return str
}

func (s GPSEphemeris) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GPSEphemeris) DecodeFromPtr(p capnp.Ptr) GPSEphemeris {
	return GPSEphemeris(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GPSEphemeris) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GPSEphemeris) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GPSEphemeris) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GPSEphemeris) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GPSEphemeris) BaseEphemeris() (BaseEphemeris, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BaseEphemeris(p.Struct()), err
}

func (s GPSEphemeris) HasBaseEphemeris() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GPSEphemeris) SetBaseEphemeris(v BaseEphemeris) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBaseEphemeris sets the baseEphemeris field to a newly
// allocated BaseEphemeris struct, preferring placement in s's segment.
func (s GPSEphemeris) NewBaseEphemeris() (BaseEphemeris, error) {
	ss, err := NewBaseEphemeris(capnp.Struct(s).Segment())
	if err != nil {
		return BaseEphemeris{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GPSEphemeris) EphemerisData() (Ephemeris, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Ephemeris(p.Struct()), err
}

func (s GPSEphemeris) HasEphemerisData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GPSEphemeris) SetEphemerisData(v Ephemeris) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEphemerisData sets the ephemerisData field to a newly
// allocated Ephemeris struct, preferring placement in s's segment.
func (s GPSEphemeris) NewEphemerisData() (Ephemeris, error) {
	ss, err := NewEphemeris(capnp.Struct(s).Segment())
	if err != nil {
		return Ephemeris{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GPSEphemeris) Toe() (GPSTime, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return GPSTime(p.Struct()), err
}

func (s GPSEphemeris) HasToe() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GPSEphemeris) SetToe(v GPSTime) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewToe sets the toe field to a newly
// allocated GPSTime struct, preferring placement in s's segment.
func (s GPSEphemeris) NewToe() (GPSTime, error) {
	ss, err := NewGPSTime(capnp.Struct(s).Segment())
	if err != nil {
		return GPSTime{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GPSEphemeris) Toc() (GPSTime, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return GPSTime(p.Struct()), err
}

func (s GPSEphemeris) HasToc() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s GPSEphemeris) SetToc(v GPSTime) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewToc sets the toc field to a newly
// allocated GPSTime struct, preferring placement in s's segment.
func (s GPSEphemeris) NewToc() (GPSTime, error) {
	ss, err := NewGPSTime(capnp.Struct(s).Segment())
	if err != nil {
		return GPSTime{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GPSEphemeris) SquareRootOfSemiMajorAxis() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s GPSEphemeris) SetSquareRootOfSemiMajorAxis(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// GPSEphemeris_List is a list of GPSEphemeris.
type GPSEphemeris_List = capnp.StructList[GPSEphemeris]

// NewGPSEphemeris creates a new list of GPSEphemeris.
func NewGPSEphemeris_List(s *capnp.Segment, sz int32) (GPSEphemeris_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[GPSEphemeris](l), err
}

// GPSEphemeris_Future is a wrapper for a GPSEphemeris promised by a client call.
type GPSEphemeris_Future struct{ *capnp.Future }

func (f GPSEphemeris_Future) Struct() (GPSEphemeris, error) {
	p, err := f.Future.Ptr()
	return GPSEphemeris(p.Struct()), err
}
func (p GPSEphemeris_Future) BaseEphemeris() BaseEphemeris_Future {
	return BaseEphemeris_Future{Future: p.Future.Field(0, nil)}
}
func (p GPSEphemeris_Future) EphemerisData() Ephemeris_Future {
	return Ephemeris_Future{Future: p.Future.Field(1, nil)}
}
func (p GPSEphemeris_Future) Toe() GPSTime_Future {
	return GPSTime_Future{Future: p.Future.Field(2, nil)}
}
func (p GPSEphemeris_Future) Toc() GPSTime_Future {
	return GPSTime_Future{Future: p.Future.Field(3, nil)}
}

type RINEXHeader capnp.Struct

// RINEXHeader_TypeID is the unique identifier for the type RINEXHeader.
const RINEXHeader_TypeID = 0x8861b2182dea79c8

func NewRINEXHeader(s *capnp.Segment) (RINEXHeader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6})
	return RINEXHeader(st), err
}

func NewRootRINEXHeader(s *capnp.Segment) (RINEXHeader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6})
	return RINEXHeader(st), err
}

func ReadRootRINEXHeader(msg *capnp.Message) (RINEXHeader, error) {
	root, err := msg.Root()
	return RINEXHeader(root.Struct()), err
}

func (s RINEXHeader) String() string {
	str, _ := text.Marshal(0x8861b2182dea79c8, capnp.Struct(s))
	return str
}

func (s RINEXHeader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RINEXHeader) DecodeFromPtr(p capnp.Ptr) RINEXHeader {
	return RINEXHeader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RINEXHeader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RINEXHeader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RINEXHeader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RINEXHeader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RINEXHeader) Version() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s RINEXHeader) SetVersion(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s RINEXHeader) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RINEXHeader) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RINEXHeader) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RINEXHeader) SetType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RINEXHeader) SatelliteSystem() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RINEXHeader) HasSatelliteSystem() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RINEXHeader) SatelliteSystemBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RINEXHeader) SetSatelliteSystem(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s RINEXHeader) ProgramName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s RINEXHeader) HasProgramName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RINEXHeader) ProgramNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s RINEXHeader) SetProgramName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s RINEXHeader) Agency() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s RINEXHeader) HasAgency() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s RINEXHeader) AgencyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s RINEXHeader) SetAgency(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s RINEXHeader) Date() (Time, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Time(p.Struct()), err
}

func (s RINEXHeader) HasDate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s RINEXHeader) SetDate(v Time) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated Time struct, preferring placement in s's segment.
func (s RINEXHeader) NewDate() (Time, error) {
	ss, err := NewTime(capnp.Struct(s).Segment())
	if err != nil {
		return Time{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RINEXHeader) Comments() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.TextList(p.List()), err
}

func (s RINEXHeader) HasComments() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s RINEXHeader) SetComments(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewComments sets the comments field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s RINEXHeader) NewComments(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s RINEXHeader) LeapSeconds() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RINEXHeader) SetLeapSeconds(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// RINEXHeader_List is a list of RINEXHeader.
type RINEXHeader_List = capnp.StructList[RINEXHeader]

// NewRINEXHeader creates a new list of RINEXHeader.
func NewRINEXHeader_List(s *capnp.Segment, sz int32) (RINEXHeader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6}, sz)
	return capnp.StructList[RINEXHeader](l), err
}

// RINEXHeader_Future is a wrapper for a RINEXHeader promised by a client call.
type RINEXHeader_Future struct{ *capnp.Future }

func (f RINEXHeader_Future) Struct() (RINEXHeader, error) {
	p, err := f.Future.Ptr()
	return RINEXHeader(p.Struct()), err
}
func (p RINEXHeader_Future) Date() Time_Future {
	return Time_Future{Future: p.Future.Field(4, nil)}
}

type Ephemeris capnp.Struct

// Ephemeris_TypeID is the unique identifier for the type Ephemeris.
const Ephemeris_TypeID = 0x9691bc6bef5f044a

func NewEphemeris(s *capnp.Segment) (Ephemeris, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 264, PointerCount: 2})
	return Ephemeris(st), err
}

func NewRootEphemeris(s *capnp.Segment) (Ephemeris, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 264, PointerCount: 2})
	return Ephemeris(st), err
}

func ReadRootEphemeris(msg *capnp.Message) (Ephemeris, error) {
	root, err := msg.Root()
	return Ephemeris(root.Struct()), err
}

func (s Ephemeris) String() string {
	str, _ := text.Marshal(0x9691bc6bef5f044a, capnp.Struct(s))
	return str
}

func (s Ephemeris) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ephemeris) DecodeFromPtr(p capnp.Ptr) Ephemeris {
	return Ephemeris(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ephemeris) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ephemeris) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ephemeris) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ephemeris) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ephemeris) SvId() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s Ephemeris) SetSvId(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s Ephemeris) Year() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s Ephemeris) SetYear(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s Ephemeris) Month() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s Ephemeris) SetMonth(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s Ephemeris) Day() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s Ephemeris) SetDay(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s Ephemeris) Hour() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s Ephemeris) SetHour(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s Ephemeris) Minute() uint16 {
	return capnp.Struct(s).Uint16(10)
}

func (s Ephemeris) SetMinute(v uint16) {
	capnp.Struct(s).SetUint16(10, v)
}

func (s Ephemeris) Second() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Ephemeris) SetSecond(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Ephemeris) Af0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Ephemeris) SetAf0(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Ephemeris) Af1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Ephemeris) SetAf1(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Ephemeris) Af2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Ephemeris) SetAf2(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Ephemeris) Iode() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Ephemeris) SetIode(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Ephemeris) Crs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Ephemeris) SetCrs(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Ephemeris) DeltaN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Ephemeris) SetDeltaN(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Ephemeris) M0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Ephemeris) SetM0(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Ephemeris) Cuc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Ephemeris) SetCuc(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s Ephemeris) Ecc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s Ephemeris) SetEcc(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s Ephemeris) Cus() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s Ephemeris) SetCus(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s Ephemeris) A() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s Ephemeris) SetA(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s Ephemeris) Toe() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s Ephemeris) SetToe(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s Ephemeris) Cic() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s Ephemeris) SetCic(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s Ephemeris) Omega0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s Ephemeris) SetOmega0(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s Ephemeris) Cis() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s Ephemeris) SetCis(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s Ephemeris) I0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s Ephemeris) SetI0(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s Ephemeris) Crc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s Ephemeris) SetCrc(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s Ephemeris) Omega() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s Ephemeris) SetOmega(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s Ephemeris) OmegaDot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s Ephemeris) SetOmegaDot(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s Ephemeris) IDot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s Ephemeris) SetIDot(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s Ephemeris) CodesL2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s Ephemeris) SetCodesL2(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s Ephemeris) L2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s Ephemeris) SetL2(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s Ephemeris) SvAcc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s Ephemeris) SetSvAcc(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s Ephemeris) SvHealth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s Ephemeris) SetSvHealth(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s Ephemeris) Tgd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s Ephemeris) SetTgd(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s Ephemeris) Iodc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s Ephemeris) SetIodc(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s Ephemeris) TransmissionTime() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s Ephemeris) SetTransmissionTime(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s Ephemeris) FitInterval() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s Ephemeris) SetFitInterval(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s Ephemeris) Toc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240))
}

func (s Ephemeris) SetToc(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v))
}

func (s Ephemeris) IonoCoeffsValid() bool {
	return capnp.Struct(s).Bit(1984)
}

func (s Ephemeris) SetIonoCoeffsValid(v bool) {
	capnp.Struct(s).SetBit(1984, v)
}

func (s Ephemeris) IonoAlpha() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s Ephemeris) HasIonoAlpha() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ephemeris) SetIonoAlpha(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewIonoAlpha sets the ionoAlpha field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Ephemeris) NewIonoAlpha(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Ephemeris) IonoBeta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s Ephemeris) HasIonoBeta() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Ephemeris) SetIonoBeta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewIonoBeta sets the ionoBeta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Ephemeris) NewIonoBeta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Ephemeris) TowCount() uint32 {
	return capnp.Struct(s).Uint32(252)
}

func (s Ephemeris) SetTowCount(v uint32) {
	capnp.Struct(s).SetUint32(252, v)
}

func (s Ephemeris) ToeWeek() uint16 {
	return capnp.Struct(s).Uint16(250)
}

func (s Ephemeris) SetToeWeek(v uint16) {
	capnp.Struct(s).SetUint16(250, v)
}

func (s Ephemeris) TocWeek() uint16 {
	return capnp.Struct(s).Uint16(256)
}

func (s Ephemeris) SetTocWeek(v uint16) {
	capnp.Struct(s).SetUint16(256, v)
}

// Ephemeris_List is a list of Ephemeris.
type Ephemeris_List = capnp.StructList[Ephemeris]

// NewEphemeris creates a new list of Ephemeris.
func NewEphemeris_List(s *capnp.Segment, sz int32) (Ephemeris_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 264, PointerCount: 2}, sz)
	return capnp.StructList[Ephemeris](l), err
}

// Ephemeris_Future is a wrapper for a Ephemeris promised by a client call.
type Ephemeris_Future struct{ *capnp.Future }

func (f Ephemeris_Future) Struct() (Ephemeris, error) {
	p, err := f.Future.Ptr()
	return Ephemeris(p.Struct()), err
}

type RINEXEphemeris capnp.Struct

// RINEXEphemeris_TypeID is the unique identifier for the type RINEXEphemeris.
const RINEXEphemeris_TypeID = 0xeca2c2c553ea12f6

func NewRINEXEphemeris(s *capnp.Segment) (RINEXEphemeris, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 120, PointerCount: 2})
	return RINEXEphemeris(st), err
}

func NewRootRINEXEphemeris(s *capnp.Segment) (RINEXEphemeris, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 120, PointerCount: 2})
	return RINEXEphemeris(st), err
}

func ReadRootRINEXEphemeris(msg *capnp.Message) (RINEXEphemeris, error) {
	root, err := msg.Root()
	return RINEXEphemeris(root.Struct()), err
}

func (s RINEXEphemeris) String() string {
	str, _ := text.Marshal(0xeca2c2c553ea12f6, capnp.Struct(s))
	return str
}

func (s RINEXEphemeris) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RINEXEphemeris) DecodeFromPtr(p capnp.Ptr) RINEXEphemeris {
	return RINEXEphemeris(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RINEXEphemeris) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RINEXEphemeris) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RINEXEphemeris) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RINEXEphemeris) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RINEXEphemeris) Header() (RINEXHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RINEXHeader(p.Struct()), err
}

func (s RINEXEphemeris) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RINEXEphemeris) SetHeader(v RINEXHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RINEXHeader struct, preferring placement in s's segment.
func (s RINEXEphemeris) NewHeader() (RINEXHeader, error) {
	ss, err := NewRINEXHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RINEXHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RINEXEphemeris) SatelliteId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RINEXEphemeris) SetSatelliteId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RINEXEphemeris) Epoch() (Time, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Time(p.Struct()), err
}

func (s RINEXEphemeris) HasEpoch() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RINEXEphemeris) SetEpoch(v Time) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEpoch sets the epoch field to a newly
// allocated Time struct, preferring placement in s's segment.
func (s RINEXEphemeris) NewEpoch() (Time, error) {
	ss, err := NewTime(capnp.Struct(s).Segment())
	if err != nil {
		return Time{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RINEXEphemeris) ClockBias() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s RINEXEphemeris) SetClockBias(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s RINEXEphemeris) RelativeFrequencyBias() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s RINEXEphemeris) SetRelativeFrequencyBias(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s RINEXEphemeris) MessageFrameTime() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s RINEXEphemeris) SetMessageFrameTime(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s RINEXEphemeris) PositionX() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s RINEXEphemeris) SetPositionX(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s RINEXEphemeris) VelocityX() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s RINEXEphemeris) SetVelocityX(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s RINEXEphemeris) AccelerationX() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s RINEXEphemeris) SetAccelerationX(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s RINEXEphemeris) PositionY() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s RINEXEphemeris) SetPositionY(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s RINEXEphemeris) VelocityY() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s RINEXEphemeris) SetVelocityY(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s RINEXEphemeris) AccelerationY() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s RINEXEphemeris) SetAccelerationY(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s RINEXEphemeris) PositionZ() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s RINEXEphemeris) SetPositionZ(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s RINEXEphemeris) VelocityZ() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s RINEXEphemeris) SetVelocityZ(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s RINEXEphemeris) AccelerationZ() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s RINEXEphemeris) SetAccelerationZ(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s RINEXEphemeris) Health() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s RINEXEphemeris) SetHealth(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s RINEXEphemeris) FrequencyChannelOffset() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RINEXEphemeris) SetFrequencyChannelOffset(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RINEXEphemeris) InformationAge() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s RINEXEphemeris) SetInformationAge(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

// RINEXEphemeris_List is a list of RINEXEphemeris.
type RINEXEphemeris_List = capnp.StructList[RINEXEphemeris]

// NewRINEXEphemeris creates a new list of RINEXEphemeris.
func NewRINEXEphemeris_List(s *capnp.Segment, sz int32) (RINEXEphemeris_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 120, PointerCount: 2}, sz)
	return capnp.StructList[RINEXEphemeris](l), err
}

// RINEXEphemeris_Future is a wrapper for a RINEXEphemeris promised by a client call.
type RINEXEphemeris_Future struct{ *capnp.Future }

func (f RINEXEphemeris_Future) Struct() (RINEXEphemeris, error) {
	p, err := f.Future.Ptr()
	return RINEXEphemeris(p.Struct()), err
}
func (p RINEXEphemeris_Future) Header() RINEXHeader_Future {
	return RINEXHeader_Future{Future: p.Future.Field(0, nil)}
}
func (p RINEXEphemeris_Future) Epoch() Time_Future {
	return Time_Future{Future: p.Future.Field(1, nil)}
}

type GroupedEphemerides capnp.Struct

// GroupedEphemerides_TypeID is the unique identifier for the type GroupedEphemerides.
const GroupedEphemerides_TypeID = 0x8a11dc8313cd9d6d

func NewGroupedEphemerides(s *capnp.Segment) (GroupedEphemerides, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GroupedEphemerides(st), err
}

func NewRootGroupedEphemerides(s *capnp.Segment) (GroupedEphemerides, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GroupedEphemerides(st), err
}

func ReadRootGroupedEphemerides(msg *capnp.Message) (GroupedEphemerides, error) {
	root, err := msg.Root()
	return GroupedEphemerides(root.Struct()), err
}

func (s GroupedEphemerides) String() string {
	str, _ := text.Marshal(0x8a11dc8313cd9d6d, capnp.Struct(s))
	return str
}

func (s GroupedEphemerides) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupedEphemerides) DecodeFromPtr(p capnp.Ptr) GroupedEphemerides {
	return GroupedEphemerides(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupedEphemerides) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupedEphemerides) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupedEphemerides) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupedEphemerides) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupedEphemerides) SatelliteId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupedEphemerides) SetSatelliteId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupedEphemerides) SortedEphemerides() (RINEXEphemeris_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RINEXEphemeris_List(p.List()), err
}

func (s GroupedEphemerides) HasSortedEphemerides() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupedEphemerides) SetSortedEphemerides(v RINEXEphemeris_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSortedEphemerides sets the sortedEphemerides field to a newly
// allocated RINEXEphemeris_List, preferring placement in s's segment.
func (s GroupedEphemerides) NewSortedEphemerides(n int32) (RINEXEphemeris_List, error) {
	l, err := NewRINEXEphemeris_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RINEXEphemeris_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GroupedEphemerides_List is a list of GroupedEphemerides.
type GroupedEphemerides_List = capnp.StructList[GroupedEphemerides]

// NewGroupedEphemerides creates a new list of GroupedEphemerides.
func NewGroupedEphemerides_List(s *capnp.Segment, sz int32) (GroupedEphemerides_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GroupedEphemerides](l), err
}

// GroupedEphemerides_Future is a wrapper for a GroupedEphemerides promised by a client call.
type GroupedEphemerides_Future struct{ *capnp.Future }

func (f GroupedEphemerides_Future) Struct() (GroupedEphemerides, error) {
	p, err := f.Future.Ptr()
	return GroupedEphemerides(p.Struct()), err
}

type SP3FormatEphemeris capnp.Struct

// SP3FormatEphemeris_TypeID is the unique identifier for the type SP3FormatEphemeris.
const SP3FormatEphemeris_TypeID = 0xe5b14b55893ef9cb

func NewSP3FormatEphemeris(s *capnp.Segment) (SP3FormatEphemeris, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SP3FormatEphemeris(st), err
}

func NewRootSP3FormatEphemeris(s *capnp.Segment) (SP3FormatEphemeris, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SP3FormatEphemeris(st), err
}

func ReadRootSP3FormatEphemeris(msg *capnp.Message) (SP3FormatEphemeris, error) {
	root, err := msg.Root()
	return SP3FormatEphemeris(root.Struct()), err
}

func (s SP3FormatEphemeris) String() string {
	str, _ := text.Marshal(0xe5b14b55893ef9cb, capnp.Struct(s))
	return str
}

func (s SP3FormatEphemeris) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SP3FormatEphemeris) DecodeFromPtr(p capnp.Ptr) SP3FormatEphemeris {
	return SP3FormatEphemeris(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SP3FormatEphemeris) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SP3FormatEphemeris) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SP3FormatEphemeris) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SP3FormatEphemeris) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SP3FormatEphemeris) Header() (SP3Header, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SP3Header(p.Struct()), err
}

func (s SP3FormatEphemeris) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SP3FormatEphemeris) SetHeader(v SP3Header) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated SP3Header struct, preferring placement in s's segment.
func (s SP3FormatEphemeris) NewHeader() (SP3Header, error) {
	ss, err := NewSP3Header(capnp.Struct(s).Segment())
	if err != nil {
		return SP3Header{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SP3FormatEphemeris) Epochs() (SP3Epoch_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SP3Epoch_List(p.List()), err
}

func (s SP3FormatEphemeris) HasEpochs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SP3FormatEphemeris) SetEpochs(v SP3Epoch_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewEpochs sets the epochs field to a newly
// allocated SP3Epoch_List, preferring placement in s's segment.
func (s SP3FormatEphemeris) NewEpochs(n int32) (SP3Epoch_List, error) {
	l, err := NewSP3Epoch_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SP3Epoch_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// SP3FormatEphemeris_List is a list of SP3FormatEphemeris.
type SP3FormatEphemeris_List = capnp.StructList[SP3FormatEphemeris]

// NewSP3FormatEphemeris creates a new list of SP3FormatEphemeris.
func NewSP3FormatEphemeris_List(s *capnp.Segment, sz int32) (SP3FormatEphemeris_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SP3FormatEphemeris](l), err
}

// SP3FormatEphemeris_Future is a wrapper for a SP3FormatEphemeris promised by a client call.
type SP3FormatEphemeris_Future struct{ *capnp.Future }

func (f SP3FormatEphemeris_Future) Struct() (SP3FormatEphemeris, error) {
	p, err := f.Future.Ptr()
	return SP3FormatEphemeris(p.Struct()), err
}
func (p SP3FormatEphemeris_Future) Header() SP3Header_Future {
	return SP3Header_Future{Future: p.Future.Field(0, nil)}
}

type SP3Header capnp.Struct

// SP3Header_TypeID is the unique identifier for the type SP3Header.
const SP3Header_TypeID = 0xd5b36c059384fab0

func NewSP3Header(s *capnp.Segment) (SP3Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 6})
	return SP3Header(st), err
}

func NewRootSP3Header(s *capnp.Segment) (SP3Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 6})
	return SP3Header(st), err
}

func ReadRootSP3Header(msg *capnp.Message) (SP3Header, error) {
	root, err := msg.Root()
	return SP3Header(root.Struct()), err
}

func (s SP3Header) String() string {
	str, _ := text.Marshal(0xd5b36c059384fab0, capnp.Struct(s))
	return str
}

func (s SP3Header) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SP3Header) DecodeFromPtr(p capnp.Ptr) SP3Header {
	return SP3Header(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SP3Header) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SP3Header) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SP3Header) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SP3Header) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SP3Header) Version() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SP3Header) HasVersion() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SP3Header) VersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SP3Header) SetVersion(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SP3Header) Start() (Time, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Time(p.Struct()), err
}

func (s SP3Header) HasStart() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SP3Header) SetStart(v Time) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewStart sets the start field to a newly
// allocated Time struct, preferring placement in s's segment.
func (s SP3Header) NewStart() (Time, error) {
	ss, err := NewTime(capnp.Struct(s).Segment())
	if err != nil {
		return Time{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SP3Header) NumberOfEpochs() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SP3Header) SetNumberOfEpochs(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SP3Header) DataUsed() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SP3Header) HasDataUsed() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SP3Header) DataUsedBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SP3Header) SetDataUsed(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s SP3Header) CoordinateSystem() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s SP3Header) HasCoordinateSystem() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SP3Header) CoordinateSystemBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s SP3Header) SetCoordinateSystem(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s SP3Header) OrbitType() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s SP3Header) HasOrbitType() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SP3Header) OrbitTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s SP3Header) SetOrbitType(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s SP3Header) Agency() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s SP3Header) HasAgency() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SP3Header) AgencyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s SP3Header) SetAgency(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s SP3Header) GpsWeek() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SP3Header) SetGpsWeek(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SP3Header) SecondsOfWeek() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SP3Header) SetSecondsOfWeek(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SP3Header) EpochInterval() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SP3Header) SetEpochInterval(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SP3Header) ModifiedJulianDay() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s SP3Header) SetModifiedJulianDay(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s SP3Header) FractionalDay() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SP3Header) SetFractionalDay(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

// SP3Header_List is a list of SP3Header.
type SP3Header_List = capnp.StructList[SP3Header]

// NewSP3Header creates a new list of SP3Header.
func NewSP3Header_List(s *capnp.Segment, sz int32) (SP3Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 6}, sz)
	return capnp.StructList[SP3Header](l), err
}

// SP3Header_Future is a wrapper for a SP3Header promised by a client call.
type SP3Header_Future struct{ *capnp.Future }

func (f SP3Header_Future) Struct() (SP3Header, error) {
	p, err := f.Future.Ptr()
	return SP3Header(p.Struct()), err
}
func (p SP3Header_Future) Start() Time_Future {
	return Time_Future{Future: p.Future.Field(1, nil)}
}

type SP3Epoch capnp.Struct

// SP3Epoch_TypeID is the unique identifier for the type SP3Epoch.
const SP3Epoch_TypeID = 0x9261b240a2cc4a68

func NewSP3Epoch(s *capnp.Segment) (SP3Epoch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SP3Epoch(st), err
}

func NewRootSP3Epoch(s *capnp.Segment) (SP3Epoch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SP3Epoch(st), err
}

func ReadRootSP3Epoch(msg *capnp.Message) (SP3Epoch, error) {
	root, err := msg.Root()
	return SP3Epoch(root.Struct()), err
}

func (s SP3Epoch) String() string {
	str, _ := text.Marshal(0x9261b240a2cc4a68, capnp.Struct(s))
	return str
}

func (s SP3Epoch) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SP3Epoch) DecodeFromPtr(p capnp.Ptr) SP3Epoch {
	return SP3Epoch(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SP3Epoch) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SP3Epoch) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SP3Epoch) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SP3Epoch) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SP3Epoch) Time() (Time, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Time(p.Struct()), err
}

func (s SP3Epoch) HasTime() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SP3Epoch) SetTime(v Time) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTime sets the time field to a newly
// allocated Time struct, preferring placement in s's segment.
func (s SP3Epoch) NewTime() (Time, error) {
	ss, err := NewTime(capnp.Struct(s).Segment())
	if err != nil {
		return Time{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SP3Epoch) Entries() (SP3Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SP3Entry_List(p.List()), err
}

func (s SP3Epoch) HasEntries() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SP3Epoch) SetEntries(v SP3Entry_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated SP3Entry_List, preferring placement in s's segment.
func (s SP3Epoch) NewEntries(n int32) (SP3Entry_List, error) {
	l, err := NewSP3Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SP3Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// SP3Epoch_List is a list of SP3Epoch.
type SP3Epoch_List = capnp.StructList[SP3Epoch]

// NewSP3Epoch creates a new list of SP3Epoch.
func NewSP3Epoch_List(s *capnp.Segment, sz int32) (SP3Epoch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SP3Epoch](l), err
}

// SP3Epoch_Future is a wrapper for a SP3Epoch promised by a client call.
type SP3Epoch_Future struct{ *capnp.Future }

func (f SP3Epoch_Future) Struct() (SP3Epoch, error) {
	p, err := f.Future.Ptr()
	return SP3Epoch(p.Struct()), err
}
func (p SP3Epoch_Future) Time() Time_Future {
	return Time_Future{Future: p.Future.Field(0, nil)}
}

type SP3Entry capnp.Struct

// SP3Entry_TypeID is the unique identifier for the type SP3Entry.
const SP3Entry_TypeID = 0xdfc8474e015f357d

func NewSP3Entry(s *capnp.Segment) (SP3Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return SP3Entry(st), err
}

func NewRootSP3Entry(s *capnp.Segment) (SP3Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return SP3Entry(st), err
}

func ReadRootSP3Entry(msg *capnp.Message) (SP3Entry, error) {
	root, err := msg.Root()
	return SP3Entry(root.Struct()), err
}

func (s SP3Entry) String() string {
	str, _ := text.Marshal(0xdfc8474e015f357d, capnp.Struct(s))
	return str
}

func (s SP3Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SP3Entry) DecodeFromPtr(p capnp.Ptr) SP3Entry {
	return SP3Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SP3Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SP3Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SP3Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SP3Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SP3Entry) SatelliteVehicleNumber() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SP3Entry) HasSatelliteVehicleNumber() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SP3Entry) SatelliteVehicleNumberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SP3Entry) SetSatelliteVehicleNumber(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SP3Entry) XPosition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SP3Entry) SetXPosition(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SP3Entry) YPosition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SP3Entry) SetYPosition(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SP3Entry) ZPosition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SP3Entry) SetZPosition(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SP3Entry) ClockBias() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SP3Entry) SetClockBias(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

// SP3Entry_List is a list of SP3Entry.
type SP3Entry_List = capnp.StructList[SP3Entry]

// NewSP3Entry creates a new list of SP3Entry.
func NewSP3Entry_List(s *capnp.Segment, sz int32) (SP3Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return capnp.StructList[SP3Entry](l), err
}

// SP3Entry_Future is a wrapper for a SP3Entry promised by a client call.
type SP3Entry_Future struct{ *capnp.Future }

func (f SP3Entry_Future) Struct() (SP3Entry, error) {
	p, err := f.Future.Ptr()
	return SP3Entry(p.Struct()), err
}

type GPSTime capnp.Struct

// GPSTime_TypeID is the unique identifier for the type GPSTime.
const GPSTime_TypeID = 0x8724cc2fcbb631fd

func NewGPSTime(s *capnp.Segment) (GPSTime, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GPSTime(st), err
}

func NewRootGPSTime(s *capnp.Segment) (GPSTime, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GPSTime(st), err
}

func ReadRootGPSTime(msg *capnp.Message) (GPSTime, error) {
	root, err := msg.Root()
	return GPSTime(root.Struct()), err
}

func (s GPSTime) String() string {
	str, _ := text.Marshal(0x8724cc2fcbb631fd, capnp.Struct(s))
	return str
}

func (s GPSTime) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GPSTime) DecodeFromPtr(p capnp.Ptr) GPSTime {
	return GPSTime(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GPSTime) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GPSTime) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GPSTime) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GPSTime) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GPSTime) Week() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GPSTime) SetWeek(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GPSTime) TimeOfWeek() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s GPSTime) SetTimeOfWeek(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// GPSTime_List is a list of GPSTime.
type GPSTime_List = capnp.StructList[GPSTime]

// NewGPSTime creates a new list of GPSTime.
func NewGPSTime_List(s *capnp.Segment, sz int32) (GPSTime_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[GPSTime](l), err
}

// GPSTime_Future is a wrapper for a GPSTime promised by a client call.
type GPSTime_Future struct{ *capnp.Future }

func (f GPSTime_Future) Struct() (GPSTime, error) {
	p, err := f.Future.Ptr()
	return GPSTime(p.Struct()), err
}

type Time capnp.Struct

// Time_TypeID is the unique identifier for the type Time.
const Time_TypeID = 0xffe70a8369c5f3f6

func NewTime(s *capnp.Segment) (Time, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Time(st), err
}

func NewRootTime(s *capnp.Segment) (Time, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Time(st), err
}

func ReadRootTime(msg *capnp.Message) (Time, error) {
	root, err := msg.Root()
	return Time(root.Struct()), err
}

func (s Time) String() string {
	str, _ := text.Marshal(0xffe70a8369c5f3f6, capnp.Struct(s))
	return str
}

func (s Time) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Time) DecodeFromPtr(p capnp.Ptr) Time {
	return Time(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Time) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Time) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Time) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Time) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Time) Seconds() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Time) SetSeconds(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Time) Nanoseconds() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Time) SetNanoseconds(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Time_List is a list of Time.
type Time_List = capnp.StructList[Time]

// NewTime creates a new list of Time.
func NewTime_List(s *capnp.Segment, sz int32) (Time_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Time](l), err
}

// Time_Future is a wrapper for a Time promised by a client call.
type Time_Future struct{ *capnp.Future }

func (f Time_Future) Struct() (Time, error) {
	p, err := f.Future.Ptr()
	return Time(p.Struct()), err
}

type EphemerisType uint16

// EphemerisType_TypeID is the unique identifier for the type EphemerisType.
const EphemerisType_TypeID = 0x88bee98e19a6d24e

// Values of EphemerisType.
const (
	EphemerisType_navigation      EphemerisType = 0
	EphemerisType_finalOrbit      EphemerisType = 1
	EphemerisType_rapidOrbit      EphemerisType = 2
	EphemerisType_ultraRapidOrbit EphemerisType = 3
	EphemerisType_qcomPoly        EphemerisType = 4
)

// String returns the enum's constant name.
func (c EphemerisType) String() string {
	switch c {
	case EphemerisType_navigation:
		return "navigation"
	case EphemerisType_finalOrbit:
		return "finalOrbit"
	case EphemerisType_rapidOrbit:
		return "rapidOrbit"
	case EphemerisType_ultraRapidOrbit:
		return "ultraRapidOrbit"
	case EphemerisType_qcomPoly:
		return "qcomPoly"

	default:
		return ""
	}
}

// EphemerisTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EphemerisTypeFromString(c string) EphemerisType {
	switch c {
	case "navigation":
		return EphemerisType_navigation
	case "finalOrbit":
		return EphemerisType_finalOrbit
	case "rapidOrbit":
		return EphemerisType_rapidOrbit
	case "ultraRapidOrbit":
		return EphemerisType_ultraRapidOrbit
	case "qcomPoly":
		return EphemerisType_qcomPoly

	default:
		return 0
	}
}

type EphemerisType_List = capnp.EnumList[EphemerisType]

func NewEphemerisType_List(s *capnp.Segment, sz int32) (EphemerisType_List, error) {
	return capnp.NewEnumList[EphemerisType](s, sz)
}

const schema_b3ca6d2462778bb1 = "x\xda\x8c\x98\x7f\x8cT\xd5\x15\xc7\xcfy?v\xf6'" +
	";\xc3}\x8b\x0b\x82\x03\xb8(\x18h\xf9\x99Zb\xba" +
	"\xb0.\xcaR\x84};\xab\x02!1og\xee\xec\xbc" +
	"2\xef\xbd\xe1\xbd7\x0bc$kQS\xb4\xd0\x82\xc5" +
	"\x06\x1aH\xd5h\x8b\x89M\x14\xb5\xb1\xc66\xdaHK" +
	"+&h\xa4\xc1\x04#$\x98\x8a\x81\x14S\xb5\xd8@" +
	"\xa69\xf7\xed\xbc\xf7\xb2\x0e\x94\xbff\xde\xe7\x9d{\xef" +
	"y\xe7\xde{\xce\xf7\xde\xf9\x9f'\x96)\x0b\xda>Q" +
	"A\xd2{\xd5\x86\xea\x95\x05\xbf\x7f\xf7\xbb\xc7\xba~\x02" +
	"\xfa4\x94\xaa/\xfft\xcbP\x97\xf5\xf7W@I\x00" +
	",:!\xdd\x86\xecS)\x01\xc0\xceH[\x00\xabG" +
	"+\x9f\xcf\xeb<l\xec\x18g\xac6\x90\xf5ry\x15" +
	"\xb2{e\xfa\xab\xcb\x7fE\xc0\xea\x9a\x0f~3\xf9g" +
	"\xe7\xfe\xb4\x03R\xd3b\xd6\x80\x8b\x96\xa8\x1b\x90\xf5\xa9" +
	"\xd4\xf1\x0au\x14\xb0j\x1d|\x8f=r*\xf5\x04u" +
	"\x8c\xb1\x8e\x91z\xdb\xa5nG\xf6\x8c\xb0>\xa8\x92\x1b" +
	"\x85U\xc7\x9e]v\xd8x\x12R\xd3\xe2\xc6\xe4\xe8\xa2" +
	"\x8e\x86\x85\xc8f\x91ClF\x03\x19\xafR\x1e\xf8\xd7" +
	"\xa67\xf7\xfc\x92\xba\x9e1\xdezW\xc3Rd\x07\x85" +
	"\xfb\xfb\x1b\xbe\xd7\x04X}\xe9\xbf\x8f\xfeB-\xber" +
	"\x82\xcc\xd5\xf1\x9f\xb8?\xb9\x14\xd9\x0bI\xfa\xfb|\xf2" +
	"\xb7\x12`\xb5\xfc\xeb\x1d?\x1fZ\xb9\xf9\x1f\xe3\x1d\x17" +
	"\xf1\xfb1\x1b@\xf6\x14\xa3\xbf{X\x9a\"\xb2m\xc9" +
	"\x03\xb8\xe6\xee\xa3\x9f\x90\xb92\xfe;_\xd3\x16\";" +
	"\xa2\xd1\xdf\xb75a\xfe\xee7?x\xfc\xde\x1f\xbe\xfc" +
	"i\xbd\x0f=\xd7\xb1\x1d\xd9\x95\x0e\xfa\xd0o:\xe8C" +
	"\xbf\x9e\xf8y\xe6\xc8\x9f\x9f=O}\xb7\x8f\xb7\xe6\x93" +
	"\x86\x90U&\xd1\xdf\xf2\xa4\xff\xc8\x80\xd5\xe3\xdd\x89m" +
	"\x7f\xd9y\xfa\xca\xf8\xb9\xa48/\xfah\xca\x06d\x17" +
	"\xa6\x88q\xa6\x88\xb9\xfc\xfa\xdfG\xccG\x9a\xffY\xad" +
	"\xb7N\xde\x9f:\x11\xd9\x99\xa9\xe4\xca\xc7S\xb7\xc0\xbc" +
	"\xea\x8aR\x81[\xdc5e\xaf\xd7\xf0\x8d\x8c\xef\x96\xb3" +
	"~\xd9\xe5\xdf\xc9\x1a%\xbb\xb4\xf4\xee\xfeL\xfb\xa0i" +
	"\xf1~D\xbdQV\x00\x14\x04H\xcd\xb9\x0d@\xef\x92" +
	"Q\x9f/a\x0aQC\x82\xf36\x00\xe8se\xd4o" +
	"\x97\xb0}\x0b\xe7\x9bP\x01\x09\x15\xc0\xaaoZ|m" +
	"\xfe~\x0e2\xdf\x84- a\x0b`8\xaeRw\xdc" +
	"\x81\xbe5+\xd6\xad\xe4F\x8e\xbb\x004\xf8\xf4p\xf0" +
	"\xf7{\x00\xf4c2\xea'%\xac\x8d}\x82\x1c:." +
	"\xa3~J\xc2\x94\x84\x1aJ\x00\xa9\x8f\xb6\x03\xe8'e" +
	"\xd4\xcfJ\x98\x92%\x0de\x80\xd4\x99!\x00\xfd\xb4\x8c" +
	"\xfay\x09S\x8a\xac\xa1\x02\x90:\xb7\x14@?+\xa3" +
	"~Q\xc2\x94\xaah\xa8\x02\xa4.P\x9f\x9f\xc9\xa8\x7f" +
	")a\xaaA\xd5\xb0\x01 \xf5\xc5*\x00\xfd\xa2\x8c\x99" +
	"V\x940\x95\x904Z\x0d\xac\x09\x87\x002\x8d(c" +
	"FC\x09GG\xb8\xeb\x99\x8e]\xfb\xd6v\xbfR\xe2" +
	"\xd8\x0a\x12\xb6\x02V=\xc3\xe7\xc5\xa2\xe9#\xcfT<" +
	"\x9f[\x10\xbe)\xb9\xce\xb0kXk aX\xa1}" +
	"\xb71\xcc\xedl\xa5\xf6\xd8\x9e3|\x8e\xc9h\x8e\x01" +
	"1\x09X\xcd:\x96\xc5m\xdf\x03\x00\x9c\x00\xd8/\xa3" +
	"h1\x01\xb0Z\xe4F)\xc3\xb3\x0e$\xec\x9c\x17N" +
	"\xca\xb5\xe3_{\xeb\x0dV\xe4\x92\x98\xfd \xa6K6" +
	"\xd0\x80\xa9\x05\xf4#\x89)G95g;\x00*\xa9" +
	"Y\xab\x00\xaa\xb61b\x0e\x1b\xbe\x09\xb2cW\xf3\xa6" +
	"m\x14\xd7\xbaC \x9b~\xd55Jf\xae\xf6P." +
	"\xfa\xae1`\x94$\x81L\x1f6g\x1d\xab\xdf)V" +
	"\x00B\xcf\xd4\xfa+\xd2u\xca%\x9e\xab\x19\xe5\xb8\x07" +
	"\xe3\x16'\xcd\xf0l\x19\xf5\xc5\xd1\xfaX\xf0$\x80\xbe" +
	"XF\xbd_\x8a&\x00\x12\xbc/\x17\xc6\xc3s\\\x9f" +
	"\xba\xc5Z\xbf\xe8\xd5\x02\x99\x8c\xf6+\xa0\x08\xe9\xb57" +
	"M\xa6\x7fQzE\xc9\xc9\x16\xaeg\xd7\xf4\x8cy\xdb" +
	"+a;m\x94o\xcf\xed(\xb7}\xd7\xe41w\xc2" +
	"\xd4t]\xee\xac(\x15\xba\x83\xc9$\x7f\x0e\xd5\xfca" +
	"\x8f+\xb7\x01d\x1eUd\xcc\xecV\"\x97\xd8.\xc1" +
	"w\x10\xdfK\\\x92\xc4\xdc\xb3=\xcaB\x80\xccN\xe2" +
	"\xfb\x88\xcb\xb2\xd8R\xec)e&@f7\xf1\x03\xc4" +
	"\x15E\xec*\xb6_\xf4\xb3\x97\xf8\xd3\xc4UUl," +
	"vPY\x0a\x90\xd9G\xfc9\xe2\x0d\xb2\xd8[\xec\x19" +
	"\xc1\x0f\x10?\xa4\xc4v\xd7\xf3\xa2\xff\xa7\x89\xbfH\xbc" +
	"Q\xd6\xb0\x11\x80\xbd \xf8s\xc4_\"\xde\xa4h\xd8" +
	"\x04\xc0~'\xf8!\xe2\xaf\x12oV5l\x06`/" +
	"\x0b\x7f^$\xfe:\xf1\x96\x06\x0d[\x00\xd8k\xc2\xfe" +
	"%\xe2o\x12oMh\xd8\x0a\xc0\xfe \xfcy\x95\xf8" +
	"[\xc4\xdb\x1a5l\x03`\x7fT\xa6\x00d^'\xfe" +
	"\x0e\xf1\x09M\x1aN\x00`o\x8b~\xde$~\x94x" +
	"{\xb3\x86\xed\x00\xec\x88\xe0o\x11?F<\xd9\xa2a" +
	"\x12\x80\xfdM\xf0w\x88\x1f'\x9ej\xd50\x05\xc0\xde" +
	"S&\x02d\x8e\x12\xff\x90\xf8\xc46\x0d'\x02\xb0\xf7" +
	"\x85\xfd1\xe2'\x89\xb3\x09\x1a2\x00vB\xf0\xe3\xc4" +
	"O\x11\xd7\xda5\xd4\x00\xd8G\xc2\xff\x0f\x89\x9f&\xde" +
	"\x91\xd4\xb0\x83\xf2\xbe\xb0?I\xfc,\xf1I)\x0d'" +
	"\x91n\x10\xdfu\x8a\xf8g\xc4o\x98\xa8\xe1\x0d\x00\xec" +
	"Sa\x7f\x9a\xf8y\xe2\x9dL\xc3N\x00vN\xac\x87" +
	"\xb3\xc4/\x12\x9f\xaci8\x19\x80]PV\x01d\xce" +
	"\x13\xbfD|J\x87\x86S\x00\xd8W\"\xfe\x17\x89_" +
	"&~\xe3$\x0do\xa4\x92\xa8\xf4\x00d\xbeTd\x1c" +
	"P%LM\xbdA\xc3\xa9\x00\xec\x8ap\xe7\x12\x99+" +
	"\xc4\xa7uj8\x0d\x80\xa1J\xc3^&\xdeH\xfc\xa6" +
	"\xc9\x1a\xde\x04\xc0T\x95\x86UT\x193I\xe2\xe9)" +
	"\x1a\xa6\x01X\x9bJ\xee7\x12\xd7\x88O\xbfQ\xc3\xe9" +
	"\x00,\xa5\x92;\xad\xc4;\x89\xcf\x98\xaa\xe1\x0c\x00\xd6" +
	"\xa1>\x01\x90\xe9$\xdeE|\xe64\x0dg\x92DQ" +
	")\xc9O'>\x97\xf8\xcd7ix3\x00\x9b#\xfa" +
	"\xef\">_\x95pA\xd7[\x09\x0d\xbb\x00\xd8<u" +
	";@f.\xbd\xb8]\x95\x10gi8\x0b\x80-Q" +
	"\x07\x002\x8b\x09\xf7S?\xb7\xa0\x86\xb7\x00\xb0{\x84" +
	"\xff\xab\x89\x17\x88\xdf\xda\xad\xe1\xad\x00\x8c\x0b\x9e#^" +
	"\">{\x9b\x86\xb3\x01\x98\xa5R\xd8\x0a\xc4}\xe2s" +
	"\x1e\xd6p\x0e\x00\xdb,x\x91\xf8VU\xc2vo\xa4" +
	"/\x87\x09\x900\x01\xd8^\xe1\x86[{H[\x8e\xed" +
	"\x17jO\x89\x9cQ\x09\xcd\x0aN94\xeb\xb6L\xbb" +
	"\xec\xf3\xf0\xd1\xe3Y\xc7\xcea3H\xd8\x0c\x980\xf2" +
	"\xf3ku.a\xe4\x17\xc4\xfe/\x0c\xeb\x9f\xe9\xe4x" +
	"\xf8\"\xebz\xb5\xff\xdd9^\xf4\x8d5\xb5G\xd9\x8a" +
	"\xba\xca\x96\xb3\xe1\x7f\x9e\xcd\xc6x\xd8\x1a\x8d\x90\xfaN" +
	"\xac\x7f3\xb4\xeev,>l\xc4:5\xc3\xc6\xb2\x19" +
	"\xc3n\xd8\"-Z\x84\"E<\xf5:>U\xd5\xf0" +
	"cz\x1d\xbf\xf60\x9aur\xdc[\x1d~\xa9\\\x0c" +
	"\xff\xa6\xbd\x91\xe5\x91\xdfUod%7\x8a~!\xd6" +
	"S\xc2\x1f\xce\xc5C\x14\x19\xfb\xaea{\x96\xe9!\xa9" +
	"\x08\x92_Q\xa3j\xde\xf4\xfbl\x9f\xbb\x90\x181\x8a" +
	"\xb1\x00D\xadM\xc7v\xeetx\x1e\xf3\xde}F\xd1" +
	"\xcc\x01\"H\x88co\x96\x17K\x05@\xa3VLZ" +
	"\xc6D\x02\xbd\xea\xe1\xbe\x11\xd3\x0f\xb5W\xbe\xb3\xe5N" +
	"\xa7l\x8b 4\x82\x84\x8d\x80\xa3\xbe\xc3\xef'\x897" +
	"\xb6(F}'\x1b\x7f\xfe\xff\x05\xb2;\x10wT\x91" +
	"\xe6\x87\x15i9\xd2\xd2\xbd\x83t\xd4J\x8cU\xa4\x15" +
	"H[~\x19\xf1\xd5(!\x8e\x15\xa4>|\x10 \xb3" +
	"\x92\xf0 F\x1a\x8f\xe9H;\xa6\x9f\xf8F\x8cd\x1e" +
	"[\x8f\xb4\xb37\x12/`\xa4\xf4\x18G\xda\x919\xe2" +
	"%\x8c\xc4\x1e\xb3\x90\x12h\x81\xb8/\xe4\x1e\x06\x05i" +
	"\xb3p\xb3H|+\xf1F\x0c\x0aR\x19]\x80\x8cO" +
	"\xfca\xe2MRP\x90\xb6\x09\xfe\x10\xf1\x1d\xc4\x9b\x1b" +
	"\x82\x82\xf4\x18>I\x85\x96\xf8^\xe2-JP\x90\xf6" +
	"\x08\xfb\xdd\xc4\x0f\xc4\xe5\xe4\x98\x04L{\xbe\xe1\xfau" +
	"4\xa0]\xb6\x86\xb8\xbb6\x0f\xddB}DZ/g" +
	"\xf8\xc6\xbd\x1e\xcf\xd1\x0c\xd6\xc4f\xd6q\xdc\x9ci\x1b" +
	"\xe8\xd7th\xf4\xce!I6X)\x01^M\x86\x8e" +
	"\x0e\x97\xbc\xfb\xe3\x1a?\xc8\x0a\xdeZH\xe7\x05\xaf-" +
	"FN\x9e\xf4\xd9>\xa4\xb9\x1b[\xb0U\xcb\xc9\x99y" +
	"\x93\xe7pU\xb9h\x1av\xaf\x81\x95\xb0\xaf\xbckd" +
	"}\xd3\xb1!m\x14{\x8d\xcau\x1e\x19\xee\xee\xcf\xd4" +
	"\x0cP(\x1d-T^\xdb\\\x00\xfd!\x19\xf5\x1d1" +
	"\xe5\xf5\x18\xc1Ge\xd4wG\x1a'\xb5k&\x80\xbe" +
	"CF}o$pR{\x08\xee\x94Q\xdf'!\x06" +
	"\xe2&\xf5\xd4\x07\x00\xfa\x01\x19\xf5C\x12V\x87\x0c\x8f" +
	"\xd3\xd8\x90\x162\x0b\x93\xd1\x89mlj\xf8\x98g\x90" +
	"\x16\xbec2:\xeb\x06\x16\"\x85%\xa3#~H\xb3" +
	"\xdf\xa6Uos\xd9p\xf9\x80#9\xfe\xda|\x86[" +
	"\xe6=\xc6\x8f\x1cw\xf9V\x13\xbdo\x05\xeb\x1a\x12\xd5" +
	"\xf6\xdd\xca\xb8@\xbd\x01\xa0?,\xa3\xbe3\xd2\xce\x8f" +
	"\x0f\xc4BR;[\xed!\xb8[F\xfd@\xecl\xb5" +
	"\x9f\xe0>\x19\xf5\xe7bg\xabg\x08>-\xa3\xfe\xa2" +
	"\x14?\xfb\xdc\xc7\x0bf\xb6\xc8\xbb\xd7\x885\x1b\xae\xbc" +
	"\xad\xfd\x8eg\xfa\xa6\x03\x18\x9e\x9e\xaa\x95:\xec\xc1:" +
	",[t\xb2\x9bzL\x03\xeaDA\xbdZ\x14\xeer" +
	"\\\xcb\xf0\xc3\xe3\xce\xf8\xb3\xc4\xd2z\x92}i$\xd9" +
	"\xbb\x0b\"\x8da2\xba\x8c\x08\xe6\xa8\x9b\x07[0\xd4" +
	"\xec\xe1E\xc88\xcd~\x8d\xf3o`\x92\x18\x13\xee+" +
	"\xc34yN\xe4\xa5\xb3\x94\x1f.b8Q\xec\x828" +
	"\x85\x9e'|\x09\xa3\xb9b_\x89\xecy\x91\xf8e\x91" +
	"&1H\x93\xdf\x88\xb4w\x89\xb8\"\xd1\x8cIA\x9a" +
	"D\xe90\x09)\x89\x84\x14qU\x0e\xd2d\x9bD\xe9" +
	"3I|*\xf1\x06%H\x93\x93%\xea\xa7\x93x\x17" +
	"\xf1\x84\x1a\xa4\xc9\x19\x82O'>\x97xcC\x90&" +
	"\xe7H\x94\xdef\x13_L\xbc)\x11\xa4\xc9\x05\xc2~" +
	">\xf1;\x8877\x06i\xf2\xfb\x82\xdfN\xbc\x97x" +
	"KS\x90&\x97\x8b~\x96\x11_M\xbc\xb59\xd0\xed" +
	"}\xc2~%\xf1A\xe2m-\x81n\xd7\x05\xef'\xbe" +
	"\x91\xf8\x84\xd6@\xb7\xaf\x17\xfd\xac#\x9e#\xde\xde\x16" +
	"\xe8vC\xa20o$^ \x9e\xc4@\xb7s\xe9\x0d" +
	"*\x0b\xc4}\xe2\xa9\x09\x81n\xdf,Q9*\x11\x7f" +
	"H\x8a/\x8d\xf0*\xae\xb6}\xeb\x1d@\xd3b\xc1\xd4" +
	";\xd9\xd7Y\xd6./\x1a\xbe9\xc2\xf1.\x97o." +
	"s;\x9b\xae\xf4\x98F\xf4\xde\xe2\x9eg\x0c\xf3\xbb\xd0" +
	"5,>N@\x94\x82\x9dc\x03\xae\x0b\xd9\x08/:" +
	"Y\xd3\xaf\xc4\x99\x91\xcd\xf2\"w\x0dH\x93\xf5\xba:" +
	"\xed\xd7\xd7i\xbf\xfe*\xed\xd7\xd7i\xbf\xa1N\xfb\x0d" +
	"Wi\x1fr\x0ak\xd1/Dzh,\x02X\xb9\xb3" +
	"`\xd86/v\xaf\xcd\xe7=\xee\x87\xd5\xc4\xb4\xf3b" +
	"\x8fC\xb7\xe9\xd8\xcb\x87\xf9u\x96\x93\x9e\xb1\x9cnq" +
	"W\x0e6`\xec\x0a\xeaW\x00\xfa\x872\xea\xa7ci" +
	"\xe1\xe3\x85\xd1u\xd3\x98BI\x9dqc\xb7Mr2" +
	"H\x93\xe7\x06b\x17K\x0a\x06i\xf2\x8b\xc3\x00\xfa\x97" +
	"2\x0e\x08a\"\x05WPW\xc8\xf22\x1dt0v" +
	"NV\x85\xbcQh\xdf&\x85,Q\x82\xfd\xd6\x86\x1b" +
	"\xe8@C\xbc\x13%\xac\x96<^\xce9\x03\x06\xda9" +
	"\xc7\xa2<+G\x896\\m\xe3KK\xacP\x0dV" +
	"J\x1c\xdb\xa3\x9ba@l\xa7xzcJ\x16+\xa1" +
	"\xb0\xb4\x8c\xad\xa6U\xb6\x06\xd1\xb4x\xaf\x99\xcf\xf3\xb4" +
	"\xcb\xed,\x8f\x89\xd6\"'M\x02XoLz\xbb\xc6" +
	"\xa0E\x1aI\x10b\x19\xa7\xec\x82\x9c\x8d\xae\xce\xae]" +
	"\xd3\x06M\x0b\xc7_T\xf6\xc4\xf3\xb74\x96\xbf\x87\xa2" +
	"\x8b\xca\xd11\xdd\x82*H\xa8\x92\x862l\xc7\x1b\x7f" +
	"Y\xf6\xbf\x00\x00\x00\xff\xff\xe4\xf7\x06\xf4"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b3ca6d2462778bb1,
		Nodes: []uint64{
			0x8724cc2fcbb631fd,
			0x8861b2182dea79c8,
			0x88bee98e19a6d24e,
			0x8a11dc8313cd9d6d,
			0x9261b240a2cc4a68,
			0x9691bc6bef5f044a,
			0xd5b36c059384fab0,
			0xd67148628f889f75,
			0xdfc8474e015f357d,
			0xe5b14b55893ef9cb,
			0xeca2c2c553ea12f6,
			0xfde08cc67d073fd0,
			0xffe70a8369c5f3f6,
		},
		Compressed: true,
	})
}
